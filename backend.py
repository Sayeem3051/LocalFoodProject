# -*- coding: utf-8 -*-
"""Local Food Wastage Management System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10lA1hA8PpJyXNsD8miop05fB0iKvWmwf

# Step 1 ‚Äî Import libraries|
"""

# üß∞ Step 1: Import the tools we'll use
# pandas  -> reading CSVs + data wrangling
# sqlite3 -> create a lightweight SQL database (.db file)
# os      -> build file paths safely
import pandas as pd
import sqlite3
import os
print("‚úÖ Libraries imported")

"""# Step 2 ‚Äî Mount Google Drive + verify files"""

#  Step 2: Mount Google Drive so Colab can see your files
from google.colab import drive
drive.mount('/content/drive')

#  Set your project folder path (change if your folder name is different)
folder_path = "/content/drive/MyDrive/Local Food Wastage Management System"

#  Quick sanity check: list what's inside the folder so we know exact filenames
print("üìÇ Files in project folder:")
for f in os.listdir(folder_path):
    print(" -", f)

"""# Step 3 ‚Äî Create SQLite DB, load CSVs, and run one query"""

#  Step 3A: Read the CSVs into pandas DataFrames
providers_df = pd.read_csv(os.path.join(folder_path, "providers_data.csv"))
receivers_df = pd.read_csv(os.path.join(folder_path, "receivers_data.csv"))
food_df      = pd.read_csv(os.path.join(folder_path, "food_listings_data.csv"))
claims_df    = pd.read_csv(os.path.join(folder_path, "claims_data.csv"))

print(" Providers:")
display(providers_df.head(3))
print(" Receivers:")
display(receivers_df.head(3))
print(" Food listings:")
display(food_df.head(3))
print(" Claims:")
display(claims_df.head(3))

#  Step 3B: Create a local SQLite database file and push the tables into it
conn = sqlite3.connect("food_wastage.db")   # this creates food_wastage.db in your Colab working dir
providers_df.to_sql("providers", conn, if_exists="replace", index=False)
receivers_df.to_sql("receivers", conn, if_exists="replace", index=False)
food_df.to_sql("food_listings", conn, if_exists="replace", index=False)
claims_df.to_sql("claims", conn, if_exists="replace", index=False)
print("‚úÖ Tables created in SQLite: providers, receivers, food_listings, claims")

#  Step 3C: ONE sample SQL query
# Question: "How many providers are there in each city?"
query = """
SELECT City, COUNT(*) AS Num_Providers
FROM providers
GROUP BY City
ORDER BY Num_Providers DESC, City ASC;
"""
result = pd.read_sql_query(query, conn)
print("üìç Providers per city:")
display(result)

# (Optional) keep the connection open for next steps; we'll reuse it.

"""# Step 4 ‚Äî CRUD Operations Example"""

# üõ†Ô∏è Step 4: CRUD Operations in SQLite

cursor = conn.cursor()

# 1Ô∏è‚É£ CREATE ‚Äî Add a new food listing
cursor.execute("""
INSERT INTO food_listings (Food_ID, Food_Name, Quantity, Expiry_Date, Provider_ID, Provider_Type, Location, Food_Type, Meal_Type)
VALUES (999, 'Bread Pack', 10, '2025-08-20', 1, 'Restaurant', 'Dubai', 'Vegetarian', 'Breakfast')
""")
conn.commit()
print("‚úÖ New food listing added!")

# 2Ô∏è‚É£ READ ‚Äî Fetch all vegetarian food
veg_food = pd.read_sql_query("SELECT * FROM food_listings WHERE Food_Type='Vegetarian'", conn)
print("\n Vegetarian food available:")
display(veg_food)

# 3Ô∏è‚É£ UPDATE ‚Äî Change quantity of the new item
cursor.execute("UPDATE food_listings SET Quantity = 15 WHERE Food_ID = 999")
conn.commit()
print("‚úÖ Quantity updated!")

# 4Ô∏è‚É£ DELETE ‚Äî Remove the new item
cursor.execute("DELETE FROM food_listings WHERE Food_ID = 999")
conn.commit()
print(" Food listing deleted!")

"""# Step 5 ‚Äî First 3 SQL Queries"""

# -----------------------------------------
# üìä Step 5: First 3 SQL Queries (Fixed)
# -----------------------------------------

# 1Ô∏è‚É£ Query 1: How many food providers and receivers are there in each city?
query1 = """
SELECT p.City,
       COUNT(DISTINCT p.Provider_ID) AS Total_Providers,
       COUNT(DISTINCT r.Receiver_ID) AS Total_Receivers
FROM providers p
LEFT JOIN receivers r ON p.City = r.City
GROUP BY p.City
ORDER BY p.City;
"""
result1 = pd.read_sql_query(query1, conn)
print("üèôÔ∏è Providers and Receivers per City:")
display(result1)

# 2Ô∏è‚É£ Query 2: Which type of food provider contributes the most food?
# Uses Provider_Type from food_listings table
query2 = """
SELECT Provider_Type,
       SUM(Quantity) AS Total_Quantity_Donated
FROM food_listings
GROUP BY Provider_Type
ORDER BY Total_Quantity_Donated DESC;
"""
result2 = pd.read_sql_query(query2, conn)
print(" Provider Type by Total Quantity Donated:")
display(result2)

# 3Ô∏è‚É£ Query 3: Contact information of food providers in a specific city (example: 'Dubai')
# Uses 'Type' column from providers table
query3 = """
SELECT Name, Type, Contact
FROM providers
WHERE City = 'Dubai';
"""
result3 = pd.read_sql_query(query3, conn)
print(" Contact Info of Providers in Dubai:")
display(result3)

"""# Step 6 ‚Äî Queries 4 to 6"""

# -----------------------------------------
# üìä Step 6: SQL Queries 4 to 6
# -----------------------------------------

# 4Ô∏è‚É£ Query 4: Which receivers have claimed the most food?
# We count the number of claims per receiver
query4 = """
SELECT r.Name AS Receiver_Name,
       COUNT(c.Claim_ID) AS Total_Claims
FROM claims c
JOIN receivers r ON c.Receiver_ID = r.Receiver_ID
GROUP BY r.Name
ORDER BY Total_Claims DESC;
"""
result4 = pd.read_sql_query(query4, conn)
print(" Receivers with the Most Claims:")
display(result4)

# 5Ô∏è‚É£ Query 5: What is the total quantity of food available from all providers?
# Simple sum of Quantity from food_listings
query5 = """
SELECT SUM(Quantity) AS Total_Food_Quantity
FROM food_listings;
"""
result5 = pd.read_sql_query(query5, conn)
print(" Total Quantity of Food Available:")
display(result5)

# 6Ô∏è‚É£ Query 6: Which city has the highest number of food listings?
# We count food listings per city and rank
query6 = """
SELECT Location AS City,
       COUNT(Food_ID) AS Total_Listings
FROM food_listings
GROUP BY Location
ORDER BY Total_Listings DESC;
"""
result6 = pd.read_sql_query(query6, conn)
print("Cities with Most Food Listings:")
display(result6)

"""# Step 7 ‚Äî Queries 7 to 9"""

# -----------------------------------------
# üìä Step 7: SQL Queries 7 to 9
# -----------------------------------------

# 7Ô∏è‚É£ Query 7: What are the most commonly available food types?
# Group by Food_Type and count how many items belong to each
query7 = """
SELECT Food_Type,
       COUNT(*) AS Total_Items
FROM food_listings
GROUP BY Food_Type
ORDER BY Total_Items DESC;
"""
result7 = pd.read_sql_query(query7, conn)
print(" Most Commonly Available Food Types:")
display(result7)

# 8Ô∏è‚É£ Query 8: How many food claims have been made for each food item?
# Join food_listings with claims to count claims per Food_ID
query8 = """
SELECT f.Food_Name,
       COUNT(c.Claim_ID) AS Total_Claims
FROM claims c
JOIN food_listings f ON c.Food_ID = f.Food_ID
GROUP BY f.Food_Name
ORDER BY Total_Claims DESC;
"""
result8 = pd.read_sql_query(query8, conn)
print(" Claims per Food Item:")
display(result8)

# 9Ô∏è‚É£ Query 9: Which provider has had the highest number of successful food claims?
# Status='Completed' means successful claim
query9 = """
SELECT p.Name AS Provider_Name,
       COUNT(c.Claim_ID) AS Successful_Claims
FROM claims c
JOIN food_listings f ON c.Food_ID = f.Food_ID
JOIN providers p ON f.Provider_ID = p.Provider_ID
WHERE c.Status = 'Completed'
GROUP BY p.Name
ORDER BY Successful_Claims DESC;
"""
result9 = pd.read_sql_query(query9, conn)
print(" Providers with Most Successful Claims:")
display(result9)

"""# Step 8 ‚Äî Queries 10 to 12"""

# -----------------------------------------
# üìä Step 8: SQL Queries 10 to 12
# -----------------------------------------

# üîü Query 10: What percentage of food claims are Completed vs Pending vs Cancelled?
# We count each status and calculate percentage from total
query10 = """
SELECT Status,
       COUNT(*) AS Count,
       ROUND((COUNT(*) * 100.0 / (SELECT COUNT(*) FROM claims)), 2) AS Percentage
FROM claims
GROUP BY Status;
"""
result10 = pd.read_sql_query(query10, conn)
print("Claim Status Percentages:")
display(result10)

# 1Ô∏è‚É£1Ô∏è‚É£ Query 11: What is the average quantity of food claimed per receiver?
# Join claims -> food_listings to get Quantity and then average per receiver
query11 = """
SELECT r.Name AS Receiver_Name,
       ROUND(AVG(f.Quantity), 2) AS Avg_Quantity_Claimed
FROM claims c
JOIN receivers r ON c.Receiver_ID = r.Receiver_ID
JOIN food_listings f ON c.Food_ID = f.Food_ID
GROUP BY r.Name
ORDER BY Avg_Quantity_Claimed DESC;
"""
result11 = pd.read_sql_query(query11, conn)
print(" Average Quantity Claimed per Receiver:")
display(result11)

# 1Ô∏è‚É£2Ô∏è‚É£ Query 12: Which meal type is claimed the most?
# Group by Meal_Type and count claims
query12 = """
SELECT Meal_Type,
       COUNT(c.Claim_ID) AS Total_Claims
FROM claims c
JOIN food_listings f ON c.Food_ID = f.Food_ID
GROUP BY Meal_Type
ORDER BY Total_Claims DESC;
"""
result12 = pd.read_sql_query(query12, conn)
print(" Most Claimed Meal Types:")
display(result12)

"""#Step 9 ‚Äî Queries 13 to 15

"""

# -----------------------------------------
#  Step 9: SQL Queries 13 to 15
# -----------------------------------------

# 1Ô∏è‚É£3Ô∏è‚É£ Query 13: Total quantity of food donated by each provider
query13 = """
SELECT p.Name AS Provider_Name,
       SUM(f.Quantity) AS Total_Quantity_Donated
FROM food_listings f
JOIN providers p ON f.Provider_ID = p.Provider_ID
GROUP BY p.Name
ORDER BY Total_Quantity_Donated DESC;
"""
result13 = pd.read_sql_query(query13, conn)
print("üì¶ Total Quantity Donated by Each Provider:")
display(result13)

# 1Ô∏è‚É£4Ô∏è‚É£ Query 14: Top 5 locations with the highest demand (most claims)
query14 = """
SELECT f.Location,
       COUNT(c.Claim_ID) AS Total_Claims
FROM claims c
JOIN food_listings f ON c.Food_ID = f.Food_ID
GROUP BY f.Location
ORDER BY Total_Claims DESC
LIMIT 5;
"""
result14 = pd.read_sql_query(query14, conn)
print("üìç Top 5 Locations with Highest Demand:")
display(result14)

# 1Ô∏è‚É£5Ô∏è‚É£ Query 15: Food items nearing expiry (less than or equal to 3 days from today)
# This helps in reducing wastage by prioritizing quick distribution
query15 = """
SELECT Food_Name, Quantity, Expiry_Date, Location
FROM food_listings
WHERE julianday(Expiry_Date) - julianday('now') <= 3
ORDER BY Expiry_Date ASC;
"""
result15 = pd.read_sql_query(query15, conn)
print("‚è≥ Food Items Nearing Expiry:")
display(result15)